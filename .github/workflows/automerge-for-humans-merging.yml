# This workflow is centrally managed in https://github.com/asyncapi/.github/
# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo

# Purpose of this workflow is to allow people to merge PR without a need of maintainer doing it. If all checks are in place (including maintainers approval) - JUST MERGE IT!
name: Automerge For Humans

on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked

jobs:
  automerge-for-humans:
    if: github.event.pull_request.draft == false && (github.event.pull_request.user.login != 'asyncapi-bot' || github.event.pull_request.user.login != 'dependabot[bot]' || github.event.pull_request.user.login != 'dependabot-preview[bot]') #it runs only if PR actor is not a bot, at least not a bot that we know
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install node-fetch @octokit/core @octokit/plugin-paginate-rest

      - name: Merge PR with Co-Authors

        run: |
          const fetch = require('node-fetch');
          const { Octokit } = require('@octokit/rest');
          const { paginateRest } = require('@octokit/plugin-paginate-rest');

          const token = process.env.GITHUB_TOKEN;
          const prNumber = process.env.PR_NUMBER;
          const prTitle = process.env.PR_TITLE;
          const repostory = process.env.GITHUB_REPOSITORY;

          async function getCoAuthors() {
            try {
              const octokit = new Octokit({ auth: token });
              const commitsResponse = await octokit.paginate("GET /repos/{owner}/{repo}/pulls/{pull_number}/commits", {
                owner: "asyncapi",
                repo: repostory,
                pull_number: prNumber,
                per_page: 100,
              });

              const coAuthors = commitsResponse
                .map(commit => ({
                  name: commit.commit.author.name,
                  email: commit.commit.author.email,
                  login: commit.author.login,
                }))
                .filter(author => author.login !== 'main_author_login') // Replace 'main_author_login' with the main author's login
                .reduce((uniqueAuthors, author) => {
                  if (!uniqueAuthors.some(a => a.email === author.email)) {
                    uniqueAuthors.push(author);
                  }
                  return uniqueAuthors;
                }, [])
                .map(author => `Co-authored-by: ${author.name} <${author.email}>`)
                .join('\n');

              return coAuthors;
            } catch (error) {
              console.error('Error fetching commits:', error);
              return null;
            }
          }

      - name: Automerge PR
        uses: pascalgn/automerge-action@22948e0bc22f0aa673800da838595a3e7347e584 #v0.15.6 https://github.com/pascalgn/automerge-action/releases/tag/v0.15.6
        env:
          GITHUB_TOKEN: "${{ secrets.GH_TOKEN }}"
          PR_NUMBER: ${{ github.event.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          MERGE_LABELS: "!do-not-merge,ready-to-merge"
          MERGE_METHOD: "squash"
          # Using the output of the previous step (`Co-authored-by: ...` lines) as commit description.
          # Important to keep 2 empty lines as https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors#creating-co-authored-commits-on-the-command-line mentions
          MERGE_COMMIT_MESSAGE: "{pullRequest.title} (#{pullRequest.number})\n\n\n${{ steps.authors.outputs.value }}" 
          MERGE_RETRIES: "20"
          MERGE_RETRY_SLEEP: "30000"